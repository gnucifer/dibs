<?php
/**
 * @file
 * Integrate DIBS payment gateway with Drupal Commerce
 */

/**
 * Implementation of hook_dibsapi().
 */
function commerce_dibs_invoice_dibsapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      $info['commerce_dibs_invoice'] = array('info' => t('Commerce dibs invoice'));
      if (!empty($delta)) {
        return isset($info[$delta]) ? $info[$delta] : NULL;
      }
      else {
        return $info;
      }
      break;
    case 'transaction_cancel':
      $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
      $order = commerce_order_load($transaction['params']['commerce_order_id']);

      if ($order && $commerce_transactions) {
        drupal_set_message(t('You have canceled your payment at DIBS'), 'warning');
        // Update transaction(s).
        foreach ($commerce_transactions as $commerce_transaction) {
          $commerce_transaction->message = 'Declined payment';
          $commerce_transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
          commerce_payment_transaction_save($commerce_transaction);
        }
        drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $transaction['params']['payment_redirect_key']);
      }
      else {
        // TODO: Set error message.
      }
      break;
    case 'transaction_accept':

      watchdog('dibs_commerce', 'transaction accecpt: ' . $transaction['tid'], array(), WATCHDOG_DEBUG);

      $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
      // Update transaction(s).
      if ($commerce_transactions) {
        if ($transaction['split_payments'] == 1) {
          $commerce_transaction = array_shift($commerce_transactions);
          $commerce_transaction->message = 'Payment completed at DIBS';
          $commerce_transaction->status = COMMERCE_CREDIT_AUTH_ONLY;
          $commerce_transaction->payload['dibs_id'] = $transaction['payment_transaction_id'];
          commerce_payment_transaction_save($commerce_transaction);
        }
        else {
          foreach ($commerce_transactions as $commerce_transaction) {
            $delta = $commerce_transaction->payload['delta'];
            $commerce_transaction->message = 'Payment completed at DIBS';
            $commerce_transaction->status = COMMERCE_CREDIT_AUTH_ONLY;
            $commerce_transaction->payload['dibs_id'] = $transaction['dibs_split_payments'][$delta];
            commerce_payment_transaction_save($commerce_transaction);
          }
        }
      }

      $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
      $order = commerce_order_load($transaction['params']['commerce_order_id']);

      if ($order && $commerce_transactions) {
        foreach ($commerce_transactions as $commerce_transaction) {
          if ($commerce_transaction->status !== COMMERCE_CREDIT_AUTH_ONLY) {
            watchdog('dibs_commerce', print_r($commerce_transaction, TRUE), array(), WATCHDOG_DEBUG);
            drupal_set_message(t('Unable to verify your payment, please try again.'), 'error');
            drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $transaction['params']['payment_redirect_key']);
          }
        }
        drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $transaction['params']['payment_redirect_key']);
      }
      else {
        // TODO: Set error message.
      }
      break;
    case 'transaction_callback':

      watchdog('dibs_commerce', 'transaction callback: ' . $transaction['tid'], array(), WATCHDOG_DEBUG);

      break;
  }
}

function _commerce_dibs_invoice_settings_form($settings = NULL) {
  $form['invoice_fee'] = array(
    '#type' => 'textfield',
    '#title' => t('Invoice fee'),
    '#description' => t('Invoice fee (expressed in minor unit of currency). Leave blank for no invoice fee.'),
    '#default_value' => isset($settings['invoice_fee']) ? $settings['invoice_fee'] : NULL,
  );
  $form['invoice_fee_vat'] = array(
    '#type' => 'textfield',
    '#title' => t('Invoice fee VAT'),
    '#description' => t('Invoice Fee VAT (e.g. "25%" is expressed as "2500"), must be set if invoiceFee is present.'),
    '#default_value' => isset($settings['invoice_fee_vat']) ? $settings['invoice_fee_vat'] : NULL,
  );
  $form['enable_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable customer comments'),
    '#default_value' => isset($settings['enable_comments']) ? $settings['enable_comments'] : NULL,
  );

  $form['default_customer_type'] = array(
    '#type' => 'select',
    '#title' => t('Default customer type'),
    '#options' => array(
      'private_person' => t('Private person'),
      'company' => t('Company'),
    ),
    '#default_value' => isset($settings['invoice_fee']) ? $settings['invoice_fee'] : 'private_person',
  );

  // @todo: restrict to default value option?
  $form['default_distribution_type'] = array(
    '#type' => 'select',
    '#title' => t('Default distribution type'),
    '#options' => array(
      // @todo: constants?
      'EMAIL' => t('Email'),
      'PAPER' => t('Paper'), // @todo paper-invoice?
    ),
    '#default_value' => isset($settings['default_distribution_type']) ? $settings['default_distribution_type'] : 'EMAIL',
  );

  /*
  $form['test'] = array(
    '#type' => t('Test mode'),
    '#type' => 'select',
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
  );
  */
}

// @todo dibs_data/dibs_params?? choose one

function _commerce_dibs_invoice_dibs_data($order_wrapper, $payment_method) {
  $dibs_data = array();

  $dibs_data['yourRef'] = $order_wrapper->order_id->value();

  $payment_method_settings = $order_wrapper->value()->data[$payment_method['method_id']];

  switch($payment_method_settings['customer_type']) {
    case 'private_person':
      if($payment_method_settings['social_security_number']) {
        $dibs_data['socialSecurityNumber'] = $payment_method_settings['social_security_number'];
      }
      break;

    case 'company':
      if($payment_method_settings['organization_number']) {
        $dibs_data['organizationNumber'] = $payment_method_settings['organization_number'];
      }
    break;
  }

  if($payment_method_settings['distribution_type'] === 'EMAIL' && isset($payment_method_settings['billing_email'])) {
    $dibs_data['billingEmail'] = $payment_method_settings['billing_email'];

  }
  return $dibs_data;
}

function _commerce_dibs_invoice_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $settings = $payment_method['settings'];
  $form = array();

  $form['customer_type'] = array(
    '#type' => 'select',
    '#title' => t('Private person or company'),
    '#options' => array(
      'private_person' => t('Private person'),
      'company' => t('Company'),
    ),
    '#default_value' => isset($settings['default_customer_type']) ? $settings['default_customer_type'] : 'private_person',
  );

  $form['social_security_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Social security number'),
    '#states' => array(
      'visible' => array(
        '#edit-commerce-payment-payment-details-customer-type' => array('value' => 'private_person'),
      ),
    ),
  );

  $form['organization_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Organization number'),
    '#states' => array(
      'visible' => array(
        '#edit-commerce-payment-payment-details-customer-type' => array('value' => 'company'),
      ),
    ),
  );

  // @todo: rename title? Distribution type sounds weird
  $form['distribution_type'] = array(
    '#type' => 'select',
    '#title' => t('Distribution type'),
    '#options' => array(
      'EMAIL' => t('Email'),
      'PAPER' => t('Paper'),
    ),
    '#default_value' => isset($settings['default_distribution_type']) ? $settings['default_distribution_type'] : 'EMAIL',
  );

  global $user;

  $form['billing_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Billing e-mail'),
    '#states' => array(
      'visible' => array(
        '#edit-commerce-payment-payment-details-distribution-type'  => array('value' => 'EMAIL')
      ),
    ),
    '#default_value' => isset($user->mail) ? $user->mail : NULL,
  );

  if($settings['enable_comments']) {
    $form['comments'] = array(
      '#type' => 'textarea',
      '#title' => t('Message'),
    );
  }
  return $form;
}


function _commerce_dibs_invoice_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data[$payment_method['method_id']] = $pane_values;
}


/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
/*
function commerce_dibs_invoice_commerce_payment_transaction_status_info() {
  // Since we use COMMERCE_CREDIT_AUTH_ONLY for decerning that a payment has
  // been autorized. We need to add that for the payment listing at orders.
  return array(
    COMMERCE_CREDIT_AUTH_ONLY => array(
      'status' => COMMERCE_PAYMENT_STATUS_PENDING,
      'title' => t('Authorize'),
      'icon' => drupal_get_path('module', 'commerce_dibs_invoice') . '/auth-icon.png',
      'total' => FALSE,
    ),
  );
}
*/
