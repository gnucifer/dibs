<?php
/**
 * @file
 * Integrate DIBS payment gateway with Drupal Commerce
 */

function _commerce_dibs_dibsapi_transaction_cancel($op, $delta, &$transaction, $a3, $a4) {
  $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
  $order = commerce_order_load($transaction['params']['commerce_order_id']);

  if ($order && $commerce_transactions) {
    drupal_set_message(t('You have canceled your payment at DIBS'), 'warning');
    // Update transaction(s).
    foreach ($commerce_transactions as $commerce_transaction) {
      $commerce_transaction->message = 'Declined payment';
      $commerce_transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      commerce_payment_transaction_save($commerce_transaction);
    }
    drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $transaction['params']['payment_redirect_key']);
  }
  else {
    // TODO: Set error message.
  }
}

function _commerce_dibs_dibsapi_transaction_accept($op, $delta, &$transaction, $a3, $a4) {
  $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
  // Update transaction(s).
  if ($commerce_transactions) {
    if ($transaction['split_payments'] == 1) {
      $commerce_transaction = array_shift($commerce_transactions);
      $commerce_transaction->message = 'Payment completed at DIBS';
      $commerce_transaction->status = COMMERCE_CREDIT_AUTH_ONLY;
      $commerce_transaction->payload['dibs_id'] = $transaction['payment_transaction_id'];
      commerce_payment_transaction_save($commerce_transaction);
    }
    else {
      foreach ($commerce_transactions as $commerce_transaction) {
        $delta = $commerce_transaction->payload['delta'];
        $commerce_transaction->message = 'Payment completed at DIBS';
        $commerce_transaction->status = COMMERCE_CREDIT_AUTH_ONLY;
        $commerce_transaction->payload['dibs_id'] = $transaction['dibs_split_payments'][$delta];
        commerce_payment_transaction_save($commerce_transaction);
      }
    }
  }

  $commerce_transactions = commerce_payment_transaction_load_multiple(FALSE, array('remote_id' => $transaction['tid']));
  $order = commerce_order_load($transaction['params']['commerce_order_id']);

  if ($order && $commerce_transactions) {
    foreach ($commerce_transactions as $commerce_transaction) {
      if ($commerce_transaction->status !== COMMERCE_CREDIT_AUTH_ONLY) {
        watchdog('dibs_commerce', print_r($commerce_transaction, TRUE), array(), WATCHDOG_DEBUG);
        drupal_set_message(t('Unable to verify your payment, please try again.'), 'error');
        drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $transaction['params']['payment_redirect_key']);
      }
    }
    drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $transaction['params']['payment_redirect_key']);
  }
  else {
    // TODO: Set error message.
  }
}

/**
 * Implementation of hook_dibsapi().
 */
function commerce_dibs_dibsapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      $info['commerce_dibs'] = array('info' => t('Commerce dibs'));
      if (!empty($delta)) {
        return isset($info[$delta]) ? $info[$delta] : NULL;
      }
      else {
        return $info;
      }
      break;
    case 'transaction_cancel':
      _commerce_dibs_dibsapi_transaction_cancel($op, $delta, $transaction, $a3, $a4); 
      break;
    case 'transaction_accept':
      watchdog('dibs_commerce', 'transaction accecpt: ' . $transaction['tid'], array(), WATCHDOG_DEBUG);
      _commerce_dibs_dibsapi_transaction_accept($op, $delta, $transaction, $a3, $a4);
      break;
    case 'transaction_callback':
      watchdog('dibs_commerce', 'transaction callback: ' . $transaction['tid'], array(), WATCHDOG_DEBUG);
      break;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_dibs_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_dibs'] = array(
    'title' => t('DIBS'),
    'description' => t('Payment using the DIBS provider.'),
    'display_title' => t('DIBS Payment Services'),
    'offsite' => TRUE,
  );
  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
function commerce_dibs_commerce_payment_transaction_status_info() {
  // Since we use COMMERCE_CREDIT_AUTH_ONLY for decerning that a payment has
  // been autorized. We need to add that for the payment listing at orders.
  return array(
    COMMERCE_CREDIT_AUTH_ONLY => array(
      'status' => COMMERCE_PAYMENT_STATUS_PENDING,
      'title' => t('Authorize'),
      'icon' => drupal_get_path('module', 'commerce_dibs') . '/auth-icon.png',
      'total' => FALSE,
    ),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_dibs_settings_form($settings = NULL) {
  $form = array();
  $form['info']['#markup'] = l(t('Setup commerce dibs'), 'admin/config/payment/dibs/edit/commerce_dibs/commerce_dibs');
  $form['split'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use split payments'),
    '#default_value' => $settings['split'],
    '#description' => t('Split each line item into a seperate transaction using split payments. Only works with flex window.'),
  );
  return $form;
}

// Converts commerce order to dibs order information
//@todo typed argument? Order or order wrapper?
function _commerce_dibs_order_lines_information($commerce_line_items) {

  $dibs_order_info = new DibsOrderInformation(array(
    DibsOrderInformation::QUANTITY,
    DibsOrderInformation::UNIT_CODE,
    DibsOrderInformation::DESCRIPTION,
    DibsOrderInformation::AMOUNT,
    DibsOrderInformation::ITEM_ID,
    DibsOrderInformation::VAT_AMOUNT,
  ));

  //TODO: check line item wrapper format
  foreach($commerce_line_items as $line_item_wrapper) {
    $item_id = NULL;

    // Extract potiential pruduct-sku
    try {
      $product = $line_item_wrapper->commerce_product;
      $item_id = $product->sku->value();
    }
    catch (EntityMetadataWrapperException $e) {
      $item_id = $line_item_wrapper->line_item_id->value();
    }

    $item_amount = $line_item_wrapper->commerce_unit_price->amount->value();
    $vat_amount = 0;

    // Extract potential VAT-information
    try {
      $unit_price = $line_item_wrapper->commerce_unit_price;
      $data = $unit_price->data->value();
      foreach($data['components'] as $component) {
        if(
          isset($component['price']['data']['tax_rate']['type']) &&
          $component['price']['data']['tax_rate']['type'] === 'vat'
        ) {
          //@todo: wrapper support?
          $vat_type = commerce_tax_type_load('vat');
          $vat_amount += $component['price']['amount'];
          if($vat_type['display_inclusive']) {
            $item_amount -= $vat_amount;
          }
        }
      }
    }
    catch (EntityMetadataWrapperException $e) {}

    $data = array(
      intval($line_item_wrapper->quantity->value()),
      'pcs',
      $line_item_wrapper->line_item_label->value(),
      $item_amount,
      $item_id,
      $vat_amount,
    );
    $dibs_order_info->addRow($data);
  }
  return $dibs_order_info->data();
}

function _commerce_dibs_customer_billing_address_information($commerce_customer_address) {
  $dibs_data = array();
  //This is kludgy and should be done in another way
  $first_last_name = explode(' ', $commerce_customer_address['name_line'], 2);
  $first_name = array_shift($first_last_name);
  if(!empty($first_last_name)) {
    $last_name = array_shift($first_last_name);
  }

  if(!empty($commerce_customer_address['first_name'])) {
    $first_name = $commerce_customer_address['first_name'];
  }
  if(!empty($commerce_customer_address['last_name'])) {
    $last_name = $commerce_customer_address['last_name'];
  }
  
  $dibs_data['billingFirstName'] = $first_name;
  if(isset($last_name)) {
    $dibs_data['billingLastName'] = $last_name;
  }

  $dibs_data['billingAddress'] = $commerce_customer_address['thoroughfare']; 
  
  if(!empty($commerce_customer_address['premise'])) {
    $dibs_data['billingAddress2'] = $commerce_customer_address['premise'];
  }
  $dibs_data['billingPostalCode'] = $commerce_customer_address['postal_code'];
  $dibs_data['billingPostalPlace'] = $commerce_customer_address['locality'];

  return $dibs_data;
}

function _commerce_dibs_customer_shipping_address_information($commerce_customer_address) {
  $dibs_data = array();
  //This is kludgy and should be done in another way
  $first_last_name = explode(' ', $commerce_customer_address['name_line'], 2);
  $first_name = array_shift($first_last_name);
  if(!empty($first_last_name)) {
    $last_name = array_shift($first_last_name);
  }

  if(!empty($commerce_customer_address['first_name'])) {
    $first_name = $commerce_customer_address['first_name'];
  }
  if(!empty($commerce_customer_address['last_name'])) {
    $last_name = $commerce_customer_address['last_name'];
  }
  
  $dibs_data['billingFirstName'] = $first_name;
  if(isset($last_name)) {
    $dibs_data['billingLastName'] = $last_name;
  }

  $dibs_data['shippingAddress'] = $commerce_customer_address['thoroughfare']; 
  
  if(!empty($commerce_customer_address['premise'])) {
    $dibs_data['shippingAddress2'] = $commerce_customer_address['premise'];
  }
  $dibs_data['shippingPostalCode'] = $commerce_customer_address['postal_code'];
  $dibs_data['shippingPostalPlace'] = $commerce_customer_address['locality'];

  return $dibs_data;
}

function _commerce_dibs_commerce_order_dibs_data($order_wrapper) {
  $dibs_data = array();
  $dibs_data = _commerce_dibs_order_lines_information($order_wrapper->commerce_line_items);
  if($order_wrapper->commerce_customer_billing) {
    $dibs_data += _commerce_dibs_customer_billing_address_information(
      $order_wrapper->commerce_customer_billing->commerce_customer_address->value());
  }
  if($order_wrapper->commerce_customer_shipping) {
    $dibs_data += _commerce_dibs_customer_shipping_address_information(
      $order_wrapper->commerce_customer_shipping->commerce_customer_address->value());
  }
  return $dibs_data;
}


function _commerce_dibs_payment_prepare($order, $payment_method) {

}

function _commerce_dibs_dibs_transaction_data($order, $api_module, $api_delta) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $currency_info = commerce_currency_load($currency_code);
  $data = array(
    'api_module'          => $api_module,
    'api_delta'           => $api_delta,
    'payment_price'       => $order_wrapper->commerce_order_total->amount->value(),
    'payment_currency'    => $currency_info['numeric_code'],
    'payment_order_id'    => $order_wrapper->order_id->value(),
    'params'              => array(
      'commerce_order_id' => $order_wrapper->order_id->value(),
      'payment_redirect_key' => $order->data['payment_redirect_key'],
    ),
  );
  return $data;
}

function _commerce_dibs_commerce_transaction($order_wrapper, $payment_method, $dibs_transaction_id) {
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order_wrapper->order_id->value());
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
  $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING; 
  $transaction->remote_id = $dibs_transaction_id;
  commerce_payment_transaction_save($transaction);
  return $transaction;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_dibs_redirect_form($form, &$form_state, $order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Prepare the DIBS payment
  $data = _commerce_dibs_dibs_transaction_data($order, 'commerce_dibs', 'commerce_dibs');
  $hash = dibs_payment_prepare($data, FALSE);
  $dibs_transaction = dibs_transaction_hash_load($hash);

  //Why load order again?
  //$order = commerce_order_load($order->order_id);

  $use_split = !empty($payment_method['settings']['split']);
  
  if ($use_split && count($order_wrapper->commerce_line_items->value()) > 1) {
    $count = 1;
    $split_payments = array();
    $commerce_transactions = array();
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      $transaction = commerce_payment_transaction_new('commerce_dibs', $order->order_id);
      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->amount = $line_item_wrapper->commerce_total->amount->value();
      $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->payload = array('delta' => $count, 'commerce_line_item_id' => $line_item_wrapper->line_item_id->value());
      $transaction->remote_id = $dibs_transaction['tid'];
      commerce_payment_transaction_save($transaction);
      $split_payments[] = $transaction->amount;
      $commerce_transactions[] = $transaction;
      $count += 1;
    }
    $dibs_transaction['params']['split_payment_price'] = $split_payments;
    $dibs_transaction['split_payments'] = count($split_payments);
    drupal_write_record('dibs_transactions', $dibs_transaction);
  }
  else {
    $use_split = FALSE;
    /*
    $transaction = commerce_payment_transaction_new('commerce_dibs', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
    $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    commerce_payment_transaction_save($transaction);
    */
    // Prepare the commerce transaction
    $transaction = _commerce_dibs_commerce_transaction($order_wrapper, $payment_method, $dibs_transaction['tid']);
  }

  /**
  * Specifying array with payment info.
  *
  * The following info are required:
  * - api_module
  * - api_delta
  * - payment_price (should be integer or float)
  *
  * Optional info with no fall back
  * - order_info_short (string)
  * - order_info_long (should be an array)
  *
  * Optional info with fall back on logged in user data
  * - customer_uid (integer)
  * - customer_name
  * - customer_address
  * - customer_address2
  * - customer_city
  * - customer_zipcode
  * - customer_country
  * - customer_email
  * - customer_phone
  *
  * All info without type specified should be strings.
  */


  //$currency_info = commerce_currency_load($transaction->currency_code);
  /*
  $data = array(
    'api_module'          => 'commerce_dibs',
    'api_delta'           => 'commerce_dibs',
    'payment_price'       => $order_wrapper->commerce_order_total->amount->value(),
    'payment_currency'    => $currency_info['numeric_code'],
    'payment_order_id'    => '',
    'params'              => array(
      'commerce_order_id' => $order->order_id,
      'payment_redirect_key' => $order->data['payment_redirect_key'],
    ),
  );
   */

  $settings = dibs_load_settings('commerce_dibs', 'commerce_dibs');
  $settings['auto_submit'] = 1;

  module_load_include('inc', 'dibs', 'dibs.frontend');

  $dibs_params = _commerce_dibs_commerce_order_dibs_data($order_wrapper);

  $settings_mapping = array(
    DIBS_PAYMENT_WINDOW  => 'paymentwindow',
    DIBS_FLEXWIN => 'flexwindow',
  );
  $type = $settings_mapping[$settings['general']['type']];
  $dibs_params['payType'] = !empty($settings[$type]['paytype']) ? $settings[$type]['paytype'] : 'ALL_CARDS';
  return drupal_get_form('dibs_frontend_redirect_form', $settings, $dibs_transaction, $dibs_params);
}
